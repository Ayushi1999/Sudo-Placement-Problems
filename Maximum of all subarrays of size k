/* Given an array A and an integer K. Find the maximum for each and every contiguous subarray of size K.

Input:
2
9 3
1 2 3 1 4 5 2 3 6
10 4
8 5 10 7 9 4 15 12 90 13

Output:
3 3 4 5 5 5 6
10 10 10 15 15 90 90 */

import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		Scanner scan = new Scanner(System.in);
		int t = scan.nextInt();
		while(t>0)
		{
		    int n = scan.nextInt();
		    int k = scan.nextInt();
		    int[] arr = new int[n];
		    for(int i=0;i<n;i++)
		    {
		        arr[i] = scan.nextInt();  //1 2 3 1 4 5 2 3 6
		    }
		    Deque<Integer> q = new LinkedList<>();
		    int max = 0,i=0;
		    for(i=0;i<k;i++)
		    {
		        while(!q.isEmpty() && arr[i]>=arr[q.peekLast()])
		        {
		            q.removeLast();
		        }
		        q.add(i);
		    }
		  //  q.add(max);
		    for(;i<n;i++)
		    {
		            System.out.print(arr[q.peek()]+" ");
		        while(!q.isEmpty() && q.peek()<=i-k)
		        {
		            q.removeFirst();
		        }
		        while(!q.isEmpty() && arr[i]>=arr[q.peekLast()])
		        {
		            q.removeLast();
		        }
		        q.addLast(i);
		    }
		            System.out.print(arr[q.peek()]+" ");
		    System.out.println();
		    t--;
		}
	}
}
